import React, { useState, useEffect } from "react";

import { IssuanceServiceWBFx } from "./IssuanceServiceWBFx";
import { FilterMatchMode, FilterOperator } from "primereact/api";
import { DataTable } from "primereact/datatable";
import { Column } from "primereact/column";
import { Dropdown } from "primereact/dropdown";
import { InputNumber } from "primereact/inputnumber";

import { Calendar } from "primereact/calendar";
import { NavLink } from "react-router-dom";

const WBFxCbdcStates = () => {
  const [data, setData] = useState(null);

  const [filters, setFilters] = useState(null);
  const [loading, setLoading] = useState(true);

  const statuses = ["coinbase", "issue"];
  const issuerstatus = ["BBI", "CBI", "GBI", "RBI"];
  const assetidstatus = [
    "ASSET-BND-0001",
    "ASSET-BND-0002",
    "ASSET-BND-0003",
    "ASSET-BND-0004",
    "ASSET-BND-0005",
    "ASSET-BND-0006",
  ];
	var issuanceservice = new IssuanceServiceWBFx();

  useEffect(() => {
    //fetch the asset data from api
    // const url = "https://thebsv.tech/centralbank/getassets";
	  /*
    const urll =
      "https://sailsg1.thebsv.tech/centralbank/gettransactions/CAC-SUB901-0001";
    fetch(urll)
      .then((response) => response.json())
	  */
 issuanceservice.getsubscribertransactions().then((json) => {
        console.log("json", json);
        const sorted = json.transactions; //subscribertrans.centralsubcribertrans;
        const last = sorted.sort((a, b) => {
          return a > b ? 1 : -1;
        });
        setData(last);
        // setData(json.subscribertrans.centralsubcribertrans);
        // .issuertrans.centralissuetrans
        setLoading(false);
      })
      .catch((e) => {
        console.log("e", e);
      });
    initFilters();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  //   useEffect(() => {
  //     //fetch the asset data from api
  //     const url = "https://thebsv.tech/centralbank/getassets";
  //     const urll =
  //       "https://thebsv.tech/centralbank/gettransactions/CAC-ENT901-0001";
  //     fetch(urll)
  //       .then((response) => response.json())
  //       .then((json) => {
  //         console.log("json", json);
  //         setData(getCustomers(json.issuertrans.centralissuetrans));
  // setLoading(false);
  //       })
  //       .catch((e) => {
  //         console.log("e", e);
  //       });
  // initFilters();
  //   }, []);

  const getCustomers = (data) => {
    return [...(data || [])].map((d) => {
      d.date = new Date(d.date);
      return d;
    });
  };

  const formatDate = (value) => {
    return value.toLocaleDateString("en-US", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };
  // console.log(formatDate("11-10-2022"));

  const formatCurrency = (value) => {
    return value.toLocaleString("en-US");
  };

  const initFilters = () => {
    setFilters({
      global: { value: null, matchMode: FilterMatchMode.CONTAINS },
      issuetype: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }],
      },
      assetid: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }],
      },
      toaccountnumber: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }],
      },
      issuer: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.STARTS_WITH }],
      },

      representative: { value: null, matchMode: FilterMatchMode.IN },
      createdAt: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.DATE_IS }],
      },
      updatedAt: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.DATE_IS }],
      },
      amount: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.EQUALS }],
      },
      count: {
        operator: FilterOperator.AND,
        constraints: [{ value: null, matchMode: FilterMatchMode.EQUALS }],
      },
      activitytype: {
        operator: FilterOperator.OR,
        constraints: [{ value: null, matchMode: FilterMatchMode.EQUALS }],
      },
      activity: { value: null, matchMode: FilterMatchMode.BETWEEN },
      verified: { value: null, matchMode: FilterMatchMode.EQUALS },
    });
  };

  //   const formatDate = (value) => {
  //     return value.toLocaleDateString("en-US", {
  //         day: "2-digit",
  //         month: "2-digit",
  //         year: "numeric",
  //     });
  // };

  const dateBodyTemplate = (rowData) => {
    // return formatDate(rowData.updatedAt);
    return (
      <>
        {new Intl.DateTimeFormat("en-US", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        }).format(rowData.updatedAt)}
      </>
    );
  };
  const dateBodyTemplate1 = (rowData) => {
    return (
      <>
        {new Intl.DateTimeFormat("en-US", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        }).format(rowData.createdAt)}
      </>
    );
  };

  const dateFilterTemplate = (options) => {
    return (
      <Calendar
        value={options.value}
        onChange={(e) => options.filterCallback((e.value, options.index))}
        dateFormat="mm/dd/yy"
        // DateTimeFormat="mm/dd/yy"

        placeholder="mm/dd/yyyy"
        mask="99/99/9999"
      />
    );
  };

  const balanceBodyTemplate = (rowData) => {
    return formatCurrency(rowData.amount);
  };

  const balanceFilterTemplate = (options) => {
    return (
      <InputNumber
        value={options.value}
        onChange={(e) => options.filterCallback(e.value, options.index)}
        // mode="currency"
        // currency="USD"
        // locale="en-US"
      />
    );
  };

  const countBodyTemplate = (rowData) => {
    return rowData.count;
  };

  const countFilterTemplate = (options) => {
    return (
      <InputNumber
        value={options.value}
        onChange={(e) => options.filterCallback(e.value, options.index)}
        // mode="currency"
        // currency="USD"
        // locale="en-US"
      />
    );
  };

  const statusBodyTemplate = (rowData) => {
    return (
      <span className={`customer-badge status-${rowData.type}`}>
        {rowData.activitytype}
      </span>
    );
  };

  const txidBodyTemplate = (rowData) => {
    return (
      <span className={`customer-badge status-${rowData.type}`}>
        <a
          href="https://taalnet.whatsonchain.com/tx/957afd5a31afda1aa9790e2baad05b762307edc2a8732ce0208bbde4792def40"
          target="_blank"
          rel="noopener noreferrer"
        >
          {rowData.transactionid}
        </a>
      </span>
    );
  };

  const statusFilterTemplate = (options) => {
    return (
      <Dropdown
        value={options.value}
        options={statuses}
        onChange={(e) => options.filterCallback(e.value, options.index)}
        itemTemplate={statusItemTemplate}
        placeholder="Select a Status"
        className="p-column-filter "
        showClear
      />
    );
  };

  const statusItemTemplate = (option) => {
    return <span className={`customer-badge status-${option}`}>{option}</span>;
  };

  const issuerBodyTemplate = (rowData) => {
    return (
      // className={`customer-badge status-${rowData.type}`}
      <span>{rowData.issuer}</span>
    );
  };
  const issuerItemTemplate = (option) => {
    return <span className={`customer-badge status-${option}`}>{option}</span>;
  };
  const issuerFilterTemplate = (options) => {
    return (
      <Dropdown
        value={options.value}
        options={issuerstatus}
        onChange={(e) => options.filterCallback(e.value, options.index)}
        itemTemplate={issuerItemTemplate}
        placeholder="Select a Status"
        className="p-column-filter "
        showClear
      />
    );
  };

  const assetidBodyTemplate = (rowData) => {
    return <span>{rowData.assetid}</span>;
  };
  const assetidItemTemplate = (option) => {
    return <span className={`customer-badge status-${option}`}>{option}</span>;
  };
  const assetidFilterTemplate = (options) => {
    return (
      <Dropdown
        value={options.value}
        options={assetidstatus}
        onChange={(e) => options.filterCallback(e.value, options.index)}
        itemTemplate={assetidItemTemplate}
        placeholder="Select a Status"
        className="p-column-filter "
        showClear
      />
    );
  };

  return (
    <div className="grid table-demo">
      <div className="col-12">
        <div className="card">
          <DataTable
            value={data}
            paginator
            className="p-datatable-gridlines text-2xl"
            showGridlines
            rows={10}
            dataKey="id"
            filters={filters}
            filterDisplay="menu"
            loading={loading}
            responsiveLayout="scroll"
            emptyMessage="No customers found."
            // style={{ fontSize: "1.4rem" }}
          >
            <Column
              header="Transfer Date"
              filterField="updatedAt"
              dataType="date"
              style={{ minWidth: "10rem" }}
              body={dateBodyTemplate}
              filter
              filterElement={dateFilterTemplate}
            />
            <Column
              field="issuetype"
              header="Token Name"
              filter
              filterPlaceholder="Search by name"
              style={{ minWidth: "12rem" }}
            />
            <Column
              field="assetid"
              header="Assetid"
              filterMenuStyle={{ width: "14rem" }}
              style={{ minWidth: "12rem" }}
              body={assetidBodyTemplate}
              filter
              filterElement={assetidFilterTemplate}
            />
            <Column
              field="issuer"
              header="From Account"
              filterMenuStyle={{ width: "14rem" }}
              style={{ minWidth: "12rem" }}
              body="Operation"
              filter
              filterElement={issuerFilterTemplate}
            />
            <Column
              field="issuer"
              header="To Account"
              filterMenuStyle={{ width: "14rem" }}
              style={{ minWidth: "12rem" }}
              body={issuerBodyTemplate}
              filter
              filterElement={issuerFilterTemplate}
            />

            <Column
              header="Amount"
              filterField="amount"
              dataType="numeric"
              style={{ minWidth: "10rem" }}
              body={balanceBodyTemplate}
              filter
              filterElement={balanceFilterTemplate}
            />
            <Column
              field={txidBodyTemplate}
              header="Transaction id"
              filter
              filterPlaceholder="Search by name"
              style={{ minWidth: "12rem" }}
            />
            {/* <Column
              field="activitytype"
              header="Tx Type"
              filterMenuStyle={{ width: '14rem' }}
              style={{ minWidth: '12rem' }}
              body={statusBodyTemplate}
              filter
              filterElement={statusFilterTemplate}
            />
            <Column
              header="Issue Date"
              filterField="createdAt"
              dataType="date"
              style={{ minWidth: '10rem' }}
              body={dateBodyTemplate1}
              filter
              filterElement={dateFilterTemplate}
            /> */}
            {/* <Column
              header="Usage Count"
              filterField="count"
              dataType="numeric"
              style={{ minWidth: "10rem" }}
              body={countBodyTemplate}
              filter
              filterElement={countFilterTemplate}
            /> */}
          </DataTable>
        </div>
      </div>
    </div>
  );
};

export default WBFxCbdcStates;
